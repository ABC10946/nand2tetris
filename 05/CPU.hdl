// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // descrime "A command" or "C command"
    And16(a[0..15]=instruction, b[0..15]=true, out[15]=isCCommand, out[0..14]=CCommand);

    // Decode "C Command"
    // 111 a cccccc ddd jjj
    // a: mode a=0 -> A Register, a=1 -> from Memory(M)
    // c: comp
    // d: dest
    // j: jump condition
    And16(a[0..14]=CCommand ,b[0..14]=true, out[12]=amode, out[11]=zx, out[10]=nx, out[9]=zy, out[8]=ny, out[7]=f, out[6]=no, out[3..5]=dest, out[0..2]=jump);

    // decode dest
    DMux8Way(in=true, sel=dest, a=nullDest, b=MDest, c=DDest, d=MDDest, e=ADest, f=AMDest, g=ADDest, h=AMDDest);
    Or8Way(in[0]=DDest, in[1]=MDDest, in[2]=ADDest, in[3]=AMDDest, out=loadD);
    Or8Way(in[0]=ADest, in[1]=AMDest, in[2]=ADDest, in[3]=AMDDest, out=loadA);
    Or8Way(in[0]=MDest, in[1]=MDDest, in[2]=AMDest, in[3]=AMDDest, out=outWriteM);

    // decode jump
    DMux8Way(in=true, sel=jump, a=nullJMP, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);

    // A Command (A Register) compute
    Not(in=isCCommand, out=isACommand);
    And16(a=instruction, b[0..15]=true, out[0..15]=avalue);
    Mux16(a=outALU, b=avalue, sel=isACommand, out=outToARegister);
    Or(a=isACommand, b=loadA, out=loadARegister);
    ARegister(in[0..15]=outToARegister, load=loadARegister, out=outARegister);
    And16(a=outARegister, b[0..15]=true, out[0..14]=addressM);

    // ALU
    DRegister(in=outALU, load=loadD, out=ALUX);
    Mux16(a=outARegister, b=inM, sel=amode, out=ALUY); // change ALU-Y value A Register value or memory value, by a value. (reference O'reilly "The Elements of Computing System" Japanese Edition P.71 (ver. 2021))
    ALU(x=ALUX, y=ALUY, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outALU, zr=ALUzr, ng=ALUng);

    // JMP Compute
    // Jump in equal zero
    Or8Way(in[0]=JEQ, in[1]=JGE, in[2]=JLE, out=JE);
    And(a=ALUzr, b=JE, out=isJE);

    // Jump in least zero
    Or(a=JLT, b=JLE, out=JL);
    And(a=ALUng, b=JL, out=isJL);

    // Jump in Greater zero
    Or(a=JGT, b=JGE, out=JG);
    Or(a=ALUzr, b=ALUng, out=ALUzrng);
    Not(in=ALUzrng, out=ALUgt); // ALUzr nor ALUng = ALUgt
    And(a=ALUgt, b=JG, out=isJG);

    // Jump in not equal zero
    Not(in=ALUzr, out=ALUnzr);
    And(a=ALUnzr, b=JNE, out=isJNE);

    // sum jump command
    Or8Way(in[0]=isJE, in[1]=isJL, in[2]=isJG, in[3]=isJNE, in[4]=JMP, out=isJump);

    // PC
    Mux(a=false, b=true, sel=isJump, out=loadPCRaw); // if isJump is true, overwrite PC.
    Mux(a=false, b=loadPCRaw, sel=isCCommand, out=loadPC); // before overwrite PC, make sure this command is C command.
    Not(in=loadPC, out=isInc);
    PC(in=outARegister, load=loadPC, inc=isInc, reset=reset, out[0..14]=pc);

    Mux16(a[0..15]=false, b=outALU, sel=outWriteM, out=outM);
    And(a=outWriteM, b=isCCommand, out=writeM);
}