// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    And16(a[0..5]=address, b[0..5]=true, out[0..2]=bottomaddress, out[3..5]=upaddress);
    DMux8Way(in=load, sel=upaddress, a=loadRAM1, b=loadRAM2, c=loadRAM3, d=loadRAM4, e=loadRAM5, f=loadRAM6, g=loadRAM7, h=loadRAM8);
    RAM8(in=in, load=loadRAM1, address=bottomaddress, out=RAM1);
    RAM8(in=in, load=loadRAM2, address=bottomaddress, out=RAM2);
    RAM8(in=in, load=loadRAM3, address=bottomaddress, out=RAM3);
    RAM8(in=in, load=loadRAM4, address=bottomaddress, out=RAM4);
    RAM8(in=in, load=loadRAM5, address=bottomaddress, out=RAM5);
    RAM8(in=in, load=loadRAM6, address=bottomaddress, out=RAM6);
    RAM8(in=in, load=loadRAM7, address=bottomaddress, out=RAM7);
    RAM8(in=in, load=loadRAM8, address=bottomaddress, out=RAM8);
    Mux8Way16(a=RAM1, b=RAM2, c=RAM3, d=RAM4, e=RAM5, f=RAM6, g=RAM7, h=RAM8, sel=upaddress, out=out);
    // RAM8(in=upout, load=load, address=bottomaddress, out=out);

}